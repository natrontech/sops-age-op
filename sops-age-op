#!/usr/bin/env bash

# SOPS encryption with age using secrets in 1password vault
# Date: 2023-07-18
# Version: 0.1

# check dependencies
AGE=${AGE:-$(which age)}
OP=${OP:-op}
SOPS=${SOPS:-$(which sops)}

# Dislpay help message and quit
# param: ERROR_MESSAGE
# If ERROR_MESSAGE is not empty, exits 1, otherwise exits 0
_help() {
  [ -n "$1" ] && echo "Error: $1"
  local ds="\$"
  local prog=$(basename $0)
  cat <<_HELP

SOPS encryption with age and secret keys in 1password vault.

At the moment, the encryption and decryption is only IN PLACE possible!

Examples:

    Encrypt file:
        $prog -e -k KEY_PATH [ FILE ]

    Decrypt file:
        $prog -d -k KEY_PATH [ FILE ]

    Generate an age ed25519 key and store it in the 1password vault. The type of the new item will be "Password"
        $prog -c -t [ TAGS ] -k KEY_PATH

KEY_PATH should have one of the following formats:
    - 'op://vault/title', 'op://vault/title/field', or 'op://vault/title/section/field'
    In the first case, the field name defaults to 'password'

TAGS is a comma separated list for the 1password tags of the created object

1Password configuration:
    For the 1Password cli ('op') to authenticate with a vault, you can sign into a local app with "eval ${ds}(op signin)"

Dependencies:
    age: https://age-encryption.org
    op (1password cli): https://developer.1password.com/docs/cli/get-started
    sops: https://github.com/getsops/sops

_HELP
  [ -n "$1" ] && exit 1 || exit 0
}

# Create a new key
# params: KEYPATH
create_key() {
  local keypath="$1"
  local tags="$2"
  local key field out newkey title vault field

  ##
  ## Create new key
  ##
  vault=$(echo $keypath | sed -E 's|op://([^/]+)\/([^/]+)\/(.*)|\1|')
  title=$(echo $keypath | sed -E 's|op://([^/]+)\/([^/]+)\/(.*)|\2|')
  field=$(echo $keypath | sed -E 's|op://([^/]+)\/([^/]+)\/(.*)|\3|')

  # check if the key path exists so we don't overwrite it.
  # The successs case (key is unique) generates an error, so temporarily disable '+e'
  set +e
  key=$($OP item get "$title" "--vault=$vault" 2>/dev/null)
  [ $? -eq 0 ] && _help "Key vault:$vault title:$title already exists - will not overwrite"
  set -e
  newkey="$(age-keygen)"
  if [ -z "$tags" ]; then
    echo "TAGS: $tags"
    out=$($OP item create --category=password --title="$title" --vault="$vault" "$field=$newkey")
  else
    out=$($OP item create --category=password --title="$title" --vault="$vault" --tags="$tags" "$field=$newkey")
  fi
  echo "Created vault:$vault, title:$title"
}

cmd=""
input=""
keypath=""
tags=""

# check dependencies
[ ! $($AGE --help 2>&1 |grep Usage) ] && _help "Missing 'age' dependency. Please see installation url below."
[ ! $($OP --version) ] && _help "Missing 'op' dependency. Please see installation url below."
[ ! $($SOPS --version) 2>&1 |grep sops] && _help "Missing 'sops' dependency. Please see installation url below."

#Â check params for help
[[ $1 =~ "^\-h|^--help|^help$" ]] && _help

while getopts ':hcedt:k:' OPTION; do
  case $OPTION in
    h) _help
        ;;
    c) [ -n "$cmd" ] && _help "Only one of -e, -d, or -c may be used"
        cmd="create"
        ;;
    e) [ -n "$cmd" ] && _help "Only one of -e, -d, or -c may be used"
        cmd="encrypt"
        ;;
    d) [ -n "$cmd" ] && _help "Only one of -e, -d, or -c may be used"
        cmd="decrypt"
        ;;
    t) tags=$OPTARG
        ;;
    k) keypath=$OPTARG
        if [[ ! $keypath =~ ^op://[^/]+/[^/]+/.+$ ]]; then
          # if path has only two segments (vault & title), append field "password"
          if [[ $keypath =~ ^op://[^/]+/[^/]+$ ]]; then
            keypath="$keypath/password"
          else
            _help "Invalid key path '$keypath'"
          fi
        fi
        ;;
    ?) _help "" ;;
  esac
done
shift "$(($OPTIND -1))"

[ -z "$cmd" ] && _help "One of -e, -d, or -c must be used"
[ -z "$keypath" ]  && _help "keypath is required. Should be of the form op://vault/title[/field]"

if [ "$cmd" = "create" ]; then
  create_key $keypath $tags
else
  input="$1"
  [ ! -r "$input" ] && _help "Missing or unreadable input file '$input'"

  # read key in 1password
  key=$($OP read "$keypath")
  if [ $? -ne 0 ] || [ -z "$key" ]; then
    _help "Invalid keypath '$keypath'"
  fi

  # get pk and sk from identity
  pk=$(echo $key | cut -d" " -f7)
  sk=$(echo $key | cut -d" " -f8)

  if [ $cmd == "encrypt" ]; then
    # encryption
    $SOPS --${cmd} -a $pk -i $input
  else
    # decryption
    SOPS_AGE_KEY="$sk" $SOPS --${cmd} -i $input
  fi
fi

unset cmd input key keypath secret pk sk tags